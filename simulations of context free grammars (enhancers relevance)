{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMsG2lMWkZnKg47eBqyyu+2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S9bWk6FwX5n2","executionInfo":{"status":"ok","timestamp":1726717768497,"user_tz":420,"elapsed":1855,"user":{"displayName":"Venkata Srikar Kavirayuni","userId":"10910189441313353201"}},"outputId":"134a7427-fb40-434f-fbda-04bcb740fa6f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Generated 10000 sequences\n","Example sequence: CATCGATCCCGTTGATACATAGGGTCTTAAGCGCTGTTGTCTTTCGGCCGATGAGAGGTGCTTCCTCGCTAACTCGAACATTAACGTGCCAACTCTCAGGGTAATAATCATTGCAGAGGCGCGGCTACCTGGTGGTCTCTTGGCACCTGCGGATGCCAGCTATCGTCTAAAGGCCTGCTATCTCGCAAATCACNCCACTCGACCGAGGCCTCCCCCATGCCGATATGTCCATTTTACCTACCGGCCCCCG\n","Example label: 3\n"]}],"source":["import random\n","\n","TF_MOTIFS = {\n","    'GATA1': 'GATA', 'AP1': 'TGACTCA', 'GR': 'AGAACA', 'TAL1': 'CAGATG',\n","    'CTCF': 'CCCTC', 'DORSAL': 'GGAAATT', 'SNAIL': 'CACCTG', 'PU1': 'GAGGAA',\n","    'IRF8': 'GAAAGT', 'OCT4': 'ATGCAAAT', 'ETS': 'GGAA', 'RUNX1': 'TGTGGT',\n","    'SREBP': 'TCACNCCAC', 'CREB': 'TGACGTCA', 'STAT': 'TTCNNNNGAA',\n","    'TRL': 'GAGAG', 'DREF': 'TATCGATA', 'E2F': 'TTTCGCGC'\n","}\n","\n","def generate_random_dna(length):\n","    return ''.join(random.choice('ACGT') for _ in range(length))\n","\n","def insert_motif(sequence, motif, position):\n","    return sequence[:position] + motif + sequence[position + len(motif):]\n","\n","def generate_enhancer(grammar_type, length=250):\n","    sequence = generate_random_dna(length)\n","\n","    if grammar_type == 1:\n","        tf = random.choice(list(TF_MOTIFS.keys()))\n","        pos = random.randint(0, length - len(TF_MOTIFS[tf]))\n","        sequence = insert_motif(sequence, TF_MOTIFS[tf], pos)\n","\n","    elif grammar_type == 2:\n","        tf1, tf2 = random.sample(list(TF_MOTIFS.keys()), 2)\n","        total_motif_length = len(TF_MOTIFS[tf1]) + len(TF_MOTIFS[tf2])\n","        if total_motif_length + 5 <= length:\n","            spacing = random.randint(5, min(20, length - total_motif_length))\n","            pos1 = random.randint(0, length - total_motif_length - spacing)\n","            pos2 = pos1 + len(TF_MOTIFS[tf1]) + spacing\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf1], pos1)\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf2], pos2)\n","\n","    elif grammar_type == 3:\n","        tf1, tf2 = random.sample(list(TF_MOTIFS.keys()), 2)\n","        total_motif_length = len(TF_MOTIFS[tf1]) + len(TF_MOTIFS[tf2])\n","        if total_motif_length + 1 <= length:\n","            pos1 = random.randint(0, length - total_motif_length)\n","            pos2 = random.randint(pos1 + len(TF_MOTIFS[tf1]), length - len(TF_MOTIFS[tf2]))\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf1], pos1)\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf2], pos2)\n","\n","    elif grammar_type == 4:\n","        tf1, tf2 = random.sample(list(TF_MOTIFS.keys()), 2)\n","        if random.choice([True, False]):\n","            pos = random.randint(0, length - len(TF_MOTIFS[tf1]))\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf1], pos)\n","        else:\n","            pos = random.randint(0, length - len(TF_MOTIFS[tf2]))\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf2], pos)\n","\n","    elif grammar_type == 5:\n","        tf = random.choice(list(TF_MOTIFS.keys()))\n","        max_repeats = min(5, length // len(TF_MOTIFS[tf]))\n","        num_repeats = random.randint(2, max_repeats)\n","        positions = sorted(random.sample(range(length - len(TF_MOTIFS[tf])*num_repeats), num_repeats))\n","        for pos in positions:\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf], pos)\n","\n","    elif grammar_type == 6:\n","        tf = random.choice(list(TF_MOTIFS.keys()))\n","        if 2*len(TF_MOTIFS[tf]) + 5 <= length:\n","            spacing = random.randint(5, min(30, length - 2*len(TF_MOTIFS[tf])))\n","            pos1 = random.randint(0, length - 2*len(TF_MOTIFS[tf]) - spacing)\n","            pos2 = pos1 + len(TF_MOTIFS[tf]) + spacing\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf], pos1)\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf][::-1], pos2)\n","\n","    elif grammar_type == 7:\n","        tfs = random.sample(list(TF_MOTIFS.keys()), 3)\n","        pos = 0\n","        for tf in tfs:\n","            if pos >= length - len(TF_MOTIFS[tf]):\n","                break\n","            spacing = random.randint(5, min(20, length - pos - len(TF_MOTIFS[tf])))\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf], pos)\n","            pos += len(TF_MOTIFS[tf]) + spacing\n","\n","    elif grammar_type == 8:\n","        tf1, tf2 = random.sample(list(TF_MOTIFS.keys()), 2)\n","        total_motif_length = len(TF_MOTIFS[tf1]) + len(TF_MOTIFS[tf2])\n","        max_repeats = min(4, (length - 5) // (total_motif_length + 5))\n","        num_repeats = random.randint(2, max_repeats)\n","        pos = 0\n","        for _ in range(num_repeats):\n","            if pos >= length - total_motif_length:\n","                break\n","            spacing = random.randint(5, min(20, length - pos - total_motif_length))\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf1], pos)\n","            pos += len(TF_MOTIFS[tf1]) + spacing\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf2], pos)\n","            pos += len(TF_MOTIFS[tf2]) + spacing\n","\n","    elif grammar_type == 9:\n","        tf1, tf2 = random.sample(list(TF_MOTIFS.keys()), 2)\n","        total_motif_length = 2*len(TF_MOTIFS[tf1]) + len(TF_MOTIFS[tf2])\n","        if total_motif_length + 10 <= length:\n","            spacing1 = random.randint(5, min(20, (length - total_motif_length) // 2))\n","            spacing2 = random.randint(5, min(20, length - total_motif_length - spacing1))\n","            pos1 = random.randint(0, length - total_motif_length - spacing1 - spacing2)\n","            pos2 = pos1 + len(TF_MOTIFS[tf1]) + spacing1\n","            pos3 = pos2 + len(TF_MOTIFS[tf2]) + spacing2\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf1], pos1)\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf2], pos2)\n","            sequence = insert_motif(sequence, TF_MOTIFS[tf1], pos3)\n","\n","    elif grammar_type == 10:\n","      tfs = random.sample(list(TF_MOTIFS.keys()), min(6, length // 10))\n","      pos = 0\n","      for i, tf in enumerate(tfs):\n","          if pos >= length - len(TF_MOTIFS[tf]):\n","              break\n","          max_spacing = max(1, min(15, length - pos - len(TF_MOTIFS[tf])))\n","          if max_spacing < 5:\n","              spacing = random.randint(1, max_spacing)\n","          else:\n","              spacing = random.randint(5, max_spacing)\n","          sequence = insert_motif(sequence, TF_MOTIFS[tf], pos)\n","          pos += len(TF_MOTIFS[tf]) + spacing\n","          if i == 3:\n","              remaining_space = length - pos - sum(len(TF_MOTIFS[tf]) for tf in tfs[i+1:])\n","              if remaining_space > 0:\n","                  pos = random.randint(pos, pos + remaining_space)\n","\n","    return sequence, grammar_type\n","\n","def generate_dataset(n_samples=10000):\n","    sequences = []\n","    labels = []\n","    for _ in range(n_samples):\n","        grammar_type = random.randint(1, 10)\n","        seq, label = generate_enhancer(grammar_type)\n","        sequences.append(seq)\n","        labels.append(label)\n","    return sequences, labels\n","\n","sequences, labels = generate_dataset()\n","print(f\"Generated {len(sequences)} sequences\")\n","print(f\"Example sequence: {sequences[0]}\")\n","print(f\"Example label: {labels[0]}\")"]},{"cell_type":"code","source":["import pandas as pd\n","\n","sequences, labels = generate_dataset()\n","\n","df = pd.DataFrame({\n","    'sequence': sequences,\n","    'grammar_type': labels\n","})\n","\n","csv_filename = 'simulated_enhancer_sequences.csv'\n","df.to_csv(csv_filename, index=False)\n","\n","print(f\"Generated {len(sequences)} sequences\")\n","print(f\"Data saved to {csv_filename}\")\n","print(f\"Example sequence: {df['sequence'].iloc[0]}\")\n","print(f\"Example label: {df['grammar_type'].iloc[0]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ElMJIODXZuDY","executionInfo":{"status":"ok","timestamp":1726717825911,"user_tz":420,"elapsed":2740,"user":{"displayName":"Venkata Srikar Kavirayuni","userId":"10910189441313353201"}},"outputId":"11a183f1-d204-48bc-e6b9-55bcf71a73e7"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Generated 10000 sequences\n","Data saved to simulated_enhancer_sequences.csv\n","Example sequence: GTAGCTTAGATATTCAGTATATGGAAAAGGGTCGTAGGCGGGGCCTCCCAAATTTGCTACCAATAACACCTATGAGGGCGCGGCATAAACATAACTCTAACCACCAGATAAATTCATGAACTCATGTTCCGTCGTTACTGTTTAGAGATATGCAAATCCGGTAACTGCGGGAAGTCCGCCTACGAGCGGCCCGCACCCGCACCACTACGGAGTGCGAATGGAGTACGGGACACGCCGCTATAGGGCGAGA\n","Example label: 3\n"]}]},{"cell_type":"code","source":["df = pd.read_csv('simulated_enhancer_sequences.csv')\n","df.head()"],"metadata":{"id":"WDzpOaWZbB_f","executionInfo":{"status":"ok","timestamp":1726718172576,"user_tz":420,"elapsed":350,"user":{"displayName":"Venkata Srikar Kavirayuni","userId":"10910189441313353201"}},"outputId":"9971f7ec-8893-46e5-b3a7-4b4ead87fe16","colab":{"base_uri":"https://localhost:8080/","height":206}},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                            sequence  grammar_type\n","0  GTAGCTTAGATATTCAGTATATGGAAAAGGGTCGTAGGCGGGGCCT...             3\n","1  GATCTTTCGTGTGTAGATCCTACTCCAGCATGTCTGATGGATCGAC...             6\n","2  TCATACGTCTAGTAGATTGTGTACTGTGGACGTTTGGCCCTTCCCG...             2\n","3  TACTGTCTCCTGTGAGTAAAGAACAACGCTAAGGAAATATATATAA...             4\n","4  GGCGACCATCATGAGGACCCGGTCCGAACTTCTTGCGACTTGGTAG...             9"],"text/html":["\n","  <div id=\"df-01aacae0-d719-469b-98c0-a6f9f7ccfee8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sequence</th>\n","      <th>grammar_type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GTAGCTTAGATATTCAGTATATGGAAAAGGGTCGTAGGCGGGGCCT...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GATCTTTCGTGTGTAGATCCTACTCCAGCATGTCTGATGGATCGAC...</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>TCATACGTCTAGTAGATTGTGTACTGTGGACGTTTGGCCCTTCCCG...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>TACTGTCTCCTGTGAGTAAAGAACAACGCTAAGGAAATATATATAA...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GGCGACCATCATGAGGACCCGGTCCGAACTTCTTGCGACTTGGTAG...</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01aacae0-d719-469b-98c0-a6f9f7ccfee8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-01aacae0-d719-469b-98c0-a6f9f7ccfee8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-01aacae0-d719-469b-98c0-a6f9f7ccfee8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-85df3b93-c4a9-4913-a8b0-d433b0425467\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-85df3b93-c4a9-4913-a8b0-d433b0425467')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-85df3b93-c4a9-4913-a8b0-d433b0425467 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"sequence\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          \"GGAAAATATATAGATATAGCATTAACCACCTGTGGGCTCACNCCACTCTCCAATGACTAGAAACATCGGTTTATGAACACTGTGTGTTCCACATATATCATTGGTGAGGCTGAGCTACTTATTGAGTATTCACTACTTATTTACTCTCAATCTATGGGAGTATGGTCCAGGAAACAGAGTTCTACGCTCGCAACACAGTCTGGCTTATGCGGGATCTGAAGAGAACACGTTTTTTCNNNNGAACCACGGG\",\n          \"ACTAAGTGAGCTCTTTTCTGGAGCTACACTTGAAAGGCAATAGAGGAAGCAAAACAACATTCTCACGGGTAAGGAGGGAGGAACATGTTCTTGGGTCCACAGTGTCCCGAACCTCACCCGCTTCACTATGCTGAAACGTTCTCTCGCAGCTAGTCCAGTTGTGCCCCGGCCGTATTACGGGTAAGTTACGTATCCGCACCAAAACTATGGCAAAGAATGAGCGTGGAGTGTTAGCATCATCTTTCAAATT\",\n          \"AGAACTCATGTTCGCTACGGACATTGGTGTCATTGTTCCGATGGAAAGATCAGCTAGCTAAACCTGGAGCGGGTAATCCCACGTTCGAAAAATGAGATCTAACCGTAACGCGTCGAGTAATCGCCACTACTTCTCTGATGATTGAAGAACACCATGCTCGTGCATTCTGGTGACGTCTGAGCCCATTTACCATAGCTCAGCGATGTGGGCAGCATAGCTCTGTGTGTACGCCTTGTGCCCCACATCGGAG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"grammar_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5,\n          6,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]}]}